#!/usr/bin/env python

# SPDX-FileCopyrightText: Chris Braun (cryzed) <cryzed@googlemail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""
Insert login information using Bitwarden CLI and a dmenu-compatible application
(e.g. dmenu, rofi -dmenu, ...).
"""

USAGE = """The domain of the site has to be in the name of the Bitwarden entry, for example: "github.com/cryzed" or
"websites/github.com".  The login information is inserted by emulating key events using qutebrowser's fake-key command in this manner:
[USERNAME]<Tab>[PASSWORD], which is compatible with almost all login forms.

If enabled, with the `--totp` flag, it will also move the TOTP code to the
clipboard, much like the Firefox add-on.

You must log into Bitwarden CLI using `bw login` prior to use of this script.
The session key will be stored using keyctl for the number of seconds passed to
the --auto-lock option.

To use in qutebrowser, run: `spawn --userscript qute-bitwarden`
"""

EPILOG = """Dependencies: tldextract (Python 3 module), osascript (Python 3 module), pyperclip (optional
Python module, used for TOTP codes), Bitwarden CLI (1.7.4 is known to work
but older versions may well also work)

WARNING: The login details are viewable as plaintext in qutebrowser's debug log
(qute://log) and might be shared if you decide to submit a crash report!"""

import argparse
import calendar
import enum
import functools
import getpass
import json
import os
import subprocess
import sys
import time

import osascript
import tldextract

# support intel and m1 based mac paths
os.environ["PATH"] = os.pathsep + "/usr/local/bin:/usr/bin:/opt/homebrew/bin"

# get the current user
current_user = getpass.getuser()

argument_parser = argparse.ArgumentParser(
    description=__doc__,
    usage=USAGE,
    epilog=EPILOG,
)
argument_parser.add_argument("url", nargs="?", default=os.getenv("QUTE_URL"))
argument_parser.add_argument(
    "--no-insert-mode",
    "-n",
    dest="insert_mode",
    action="store_false",
    help="Don't automatically enter insert mode",
)
argument_parser.add_argument(
    "--totp", "-t", action="store_true", help="Copy TOTP key to clipboard"
)
argument_parser.add_argument(
    "--io-encoding",
    "-i",
    default="UTF-8",
    help="Encoding used to communicate with subprocesses",
)
argument_parser.add_argument(
    "--merge-candidates",
    "-m",
    action="store_true",
    help="Merge pass candidates for fully-qualified and registered domain name",
)
argument_parser.add_argument(
    "--auto-lock",
    type=int,
    default=900,
    help="Automatically lock the vault after this many seconds",
)
group = argument_parser.add_mutually_exclusive_group()
group.add_argument(
    "--username-only", "-e", action="store_true", help="Only insert username"
)
group.add_argument(
    "--password-only", "-w", action="store_true", help="Only insert password"
)
group.add_argument(
    "--totp-only", "-T", action="store_true", help="Only insert totp code"
)

stderr = functools.partial(print, file=sys.stderr)


class ExitCodes(enum.IntEnum):
    SUCCESS = 0
    FAILURE = 1
    # 1 is automatically used if Python throws an exception
    NO_PASS_CANDIDATES = 2
    COULD_NOT_MATCH_USERNAME = 3
    COULD_NOT_MATCH_PASSWORD = 4


def qute_command(command):
    with open(os.environ["QUTE_FIFO"], "w") as fifo:
        fifo.write(command + "\n")
        fifo.flush()


def ask_password():
    _, out, err = osascript.run(
        'Tell application "System Events" to display dialog "Enter your Bitwarden master password: " with hidden answer default answer ""'
    )

    if err:
        raise Exception("Could not unlock vault")

    last_semicolon_index = out.rfind(":")
    master_pass = out[last_semicolon_index + 1 :].strip()
    return subprocess.check_output(
        ["bw", "unlock", "--raw", master_pass],
        text=True,
    ).strip()


def find_from_keychain(name):
    process = subprocess.Popen(
        ["security", "find-generic-password", "-a", current_user, "-s", name, "-w"],
        universal_newlines=True,
        stdout=subprocess.PIPE,
    )
    output, _ = process.communicate()

    if process.returncode > 0:
        return ""

    return output.strip()


def save_to_keychain(name, value):
    subprocess.run(
        [
            "security",
            "add-generic-password",
            "-U",
            "-a",
            current_user,
            "-s",
            name,
            "-w",
            str(value),
        ],
        universal_newlines=True,
    )


def has_key_expired():
    current_timestamp = int(calendar.timegm(time.gmtime()))
    lock_timestamp = find_from_keychain("bw_session_lock")

    if not lock_timestamp:
        return True

    print(current_timestamp, lock_timestamp)

    return current_timestamp >= int(lock_timestamp)


def add_key_expiration_to_keychain(auto_lock):
    current_timestamp = int(calendar.timegm(time.gmtime()))
    # set to 15 minutes lock
    save_to_keychain("bw_session_lock", current_timestamp + auto_lock)


def get_session_key(auto_lock):
    session_key = find_from_keychain("bw_session")

    if not session_key or has_key_expired():
        session_key = ask_password()

        save_to_keychain("bw_session", session_key)
        add_key_expiration_to_keychain(auto_lock)

    return session_key.strip()


def pass_(domain, encoding, auto_lock):
    session_key = get_session_key(auto_lock)
    process = subprocess.run(
        ["bw", "list", "items", "--session", session_key, "--url", domain],
        capture_output=True,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        msg = "Bitwarden CLI returned for {:s} - {:s}".format(domain, err)
        stderr(msg)

    if process.returncode:
        return "[]"

    out = process.stdout.decode(encoding).strip()

    return out


def get_totp_code(selection_id, domain_name, encoding, auto_lock):
    session_key = get_session_key(auto_lock)
    process = subprocess.run(
        ["bw", "get", "totp", "--session", session_key, selection_id],
        capture_output=True,
    )

    err = process.stderr.decode(encoding).strip()
    if err:
        # domain_name instead of selection_id to make it more user-friendly
        msg = "Bitwarden CLI returned for {:s} - {:s}".format(domain_name, err)
        stderr(msg)

    if process.returncode:
        return "[]"

    out = process.stdout.decode(encoding).strip()

    return out


def run_chooser(items, encoding):
    process = subprocess.run(
        ["choose"], input="\n".join(items).encode(encoding), stdout=subprocess.PIPE
    )
    return process.stdout.decode(encoding).strip()


def fake_key_raw(text):
    for character in text:
        # Escape all characters by default, space requires special handling
        sequence = '" "' if character == " " else r"\{}".format(character)
        qute_command("fake-key {}".format(sequence))


def main(arguments):
    if not arguments.url:
        argument_parser.print_help()
        return ExitCodes.FAILURE

    extract_result = tldextract.extract(arguments.url)

    # Try to find candidates using targets in the following order: fully-qualified domain name (includes subdomains),
    # the registered domain name and finally: the IPv4 address if that's what
    # the URL represents
    candidates = []
    for target in filter(
        None,
        [
            extract_result.fqdn,
            extract_result.registered_domain,
            extract_result.subdomain + "." + extract_result.domain,
            extract_result.domain,
            extract_result.ipv4,
        ],
    ):
        target_candidates = json.loads(
            pass_(
                target,
                arguments.io_encoding,
                arguments.auto_lock,
            )
        )
        if not target_candidates:
            continue

        candidates = candidates + target_candidates
        if not arguments.merge_candidates:
            break
    else:
        if not candidates:
            stderr("No pass candidates for URL {!r} found!".format(arguments.url))
            return ExitCodes.NO_PASS_CANDIDATES

    if len(candidates) == 1:
        selection = candidates.pop()
    else:
        choices = [
            "{:s} | {:s}".format(c["name"], c["login"]["username"]) for c in candidates
        ]
        choice = run_chooser(choices, arguments.io_encoding)
        choice_tokens = choice.split("|")
        choice_name = choice_tokens[0].strip()
        choice_username = choice_tokens[1].strip()
        selection = next(
            (
                c
                for (_, c) in enumerate(candidates)
                if c["name"] == choice_name
                and c["login"]["username"] == choice_username
            ),
            None,
        )

    # Nothing was selected, simply return
    if not selection:
        return ExitCodes.SUCCESS

    username = selection["login"]["username"]
    password = selection["login"]["password"]
    totp = selection["login"]["totp"]

    if arguments.username_only:
        fake_key_raw(username)
    elif arguments.password_only:
        fake_key_raw(password)
    elif arguments.totp_only:
        # No point in moving it to the clipboard in this case
        fake_key_raw(
            get_totp_code(
                selection["id"],
                selection["name"],
                arguments.io_encoding,
                arguments.auto_lock,
            )
        )
    else:
        # Enter username and password using fake-key and <Tab> (which seems to work almost universally), then switch
        # back into insert-mode, so the form can be directly submitted by
        # hitting enter afterwards
        fake_key_raw(username)
        qute_command("fake-key <Tab>")
        fake_key_raw(password)

    if arguments.insert_mode:
        qute_command("mode-enter insert")

    # If it finds a TOTP code, it copies it to the clipboard,
    # which is the same behavior as the Firefox add-on.
    if not arguments.totp_only and totp and arguments.totp:
        # The import is done here, to make pyperclip an optional dependency
        import pyperclip

        pyperclip.copy(
            get_totp_code(
                selection["id"],
                selection["name"],
                arguments.io_encoding,
                arguments.auto_lock,
            )
        )

    return ExitCodes.SUCCESS


if __name__ == "__main__":
    arguments = argument_parser.parse_args()
    sys.exit(main(arguments))
